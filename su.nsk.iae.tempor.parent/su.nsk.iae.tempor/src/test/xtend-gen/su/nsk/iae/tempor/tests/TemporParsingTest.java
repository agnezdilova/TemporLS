/**
 * generated by Xtext 2.30.0
 */
package su.nsk.iae.tempor.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import su.nsk.iae.tempor.generator.ExpressionProcessor;
import su.nsk.iae.tempor.tempor.Model;

@ExtendWith(InjectionExtension.class)
@InjectWith(TemporInjectorProvider.class)
@SuppressWarnings("all")
public class TemporParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;

  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("VAR_INPUT");
      _builder.newLine();
      _builder.append("H : INT;");
      _builder.newLine();
      _builder.append("D : INT;");
      _builder.newLine();
      _builder.append("END_VAR");
      _builder.newLine();
      _builder.newLine();
      _builder.append("VAR_OUTPUT");
      _builder.newLine();
      _builder.append("OUT : INT;");
      _builder.newLine();
      _builder.append("END_VAR");
      _builder.newLine();
      _builder.newLine();
      _builder.append("SENTENCE trigger ");
      _builder.newLine();
      _builder.append("\"dryer is on and hands are present\" = D AND FE(H)");
      _builder.newLine();
      _builder.append("END_SENTENCE");
      _builder.newLine();
      _builder.newLine();
      _builder.append("SENTENCE inv");
      _builder.newLine();
      _builder.append("\"dryer is on\" = D");
      _builder.newLine();
      _builder.append("END_SENTENCE");
      _builder.newLine();
      _builder.newLine();
      _builder.append("SENTENCE rel");
      _builder.newLine();
      _builder.append("\"no hands are present\" = H");
      _builder.newLine();
      _builder.append("END_SENTENCE");
      _builder.newLine();
      _builder.newLine();
      _builder.append("SENTENCE rea");
      _builder.newLine();
      _builder.append("\"dryer is on\" = NOT D");
      _builder.newLine();
      _builder.append("END_SENTENCE");
      _builder.newLine();
      _builder.newLine();
      _builder.append("SENTENCE fin");
      _builder.newLine();
      _builder.append("\"1 second\" = TAU(#T1s)");
      _builder.newLine();
      _builder.append("END_SENTENCE");
      _builder.newLine();
      _builder.newLine();
      _builder.append("REQUIREMENT r_1");
      _builder.newLine();
      _builder.append("After \"dryer is on and hands are present\", \"dryer is on\" should remain valid until either \"no hands are present\" or ");
      _builder.newLine();
      _builder.append("reaction is \"dryer is on\", which must occur immediately after \"1 second\".");
      _builder.newLine();
      _builder.append("END_REQUIREMENT");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      EcoreUtil.resolveAll(result);
      Assertions.assertNotNull(result);
      final String res = ExpressionProcessor.ExprToString(result.getSentDeclaration().get(0).getSentenceDeclaration());
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
